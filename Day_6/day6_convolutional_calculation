import numpy as np


def apply_convolution(input_matrix, kernel):
    # Add zero padding around the input matrix
    padded_input = np.pad(input_matrix, ((1, 1), (1, 1)),
                          mode='constant', constant_values=0)

    # Output matrix initialization
    output_matrix = np.zeros(
        (padded_input.shape[0] - kernel.shape[0] + 1, padded_input.shape[1] - kernel.shape[1] + 1))

    # Convolution calculation
    for i in range(output_matrix.shape[0]):
        for j in range(output_matrix.shape[1]):
            output_matrix[i, j] = np.sum(
                padded_input[i:i+kernel.shape[0], j:j+kernel.shape[1]] * kernel)

    return output_matrix


# Input matrix
input_matrix = np.array([
    [0, 0, 0, 0],
    [0, 1, 2, 0],
    [0, 3, 4, 5],
    [6, 7, 8, 0]
])

# Kernel matrix
kernel = np.array([
    [0, 1, 2],
    [1, 2, 3]
])

# Apply convolution
output_matrix = apply_convolution(input_matrix, kernel)

# Print the output matrix
print("Output matrix:")
print(output_matrix)
